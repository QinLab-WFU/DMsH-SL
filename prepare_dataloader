def prepare_dataloader(config):
    logging.info('Creating Datasets')
    if config['dataset'] == 'MLRS':
        MLRSs.init('./data/MLRS/', 1000, 5000)
        transform = transforms.Compose([
            transforms.Resize((256, 256)),
            transforms.RandomCrop(224),
            transforms.RandomHorizontalFlip(),
            transforms.ToTensor(),
            transforms.Normalize([0.485, 0.456, 0.406], [0.229, 0.224, 0.225])
        ])
        trainset = MLRSs('./data/', 'train', transform=transform)
        testset = MLRSs('./data/', 'query', transform=transform)
        database = MLRSs('./data/', 'retrieval', transform=transform)
        train_loader = DataLoader(trainset, config['batch_size'])
        test_loader = DataLoader(testset, config['batch_size'], shuffle=False, drop_last=False)
        db_loader = DataLoader(database, config['batch_size'], shuffle=False, drop_last=False)
        return train_loader, test_loader, db_loader
    # num_train, num_test, num_database = len(trainset), len(testset), len(database)
    else:
        train_dataset = configs.dataset(config, filename='train.txt', transform_mode='train')

        separate_multiclass = config['dataset_kwargs'].get('separate_multiclass', False)
        config['dataset_kwargs']['separate_multiclass'] = False
        test_dataset = configs.dataset(config, filename='test.txt', transform_mode='test')
        db_dataset = configs.dataset(config, filename='database.txt', transform_mode='test')
        config['dataset_kwargs']['separate_multiclass'] = separate_multiclass  # during mAP, no need to separate

        logging.info(f'Number of DB data: {len(db_dataset)}')
        logging.info(f'Number of Train data: {len(train_dataset)}')

        print(train_dataset)

        train_loader = configs.dataloader(train_dataset, config['batch_size'])
        test_loader = configs.dataloader(test_dataset, config['batch_size'], shuffle=False, drop_last=False)
        db_loader = configs.dataloader(db_dataset, config['batch_size'], shuffle=False, drop_last=False)
        return train_loader, test_loader, db_loader
